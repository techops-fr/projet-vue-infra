apiVersion: apps/v1
kind: Deployment
metadata:
  name: api-deployment
  labels:
    app.kubernetes.io/name: node-api
    app.kubernetes.io/component: server
    app.kubernetes.io/part-of: auth-app
spec:
  replicas: 1
  selector:
    matchLabels:
      app.kubernetes.io/name: node-api
      app.kubernetes.io/component: server
      app.kubernetes.io/part-of: auth-app
  template:
    metadata:
      labels:
        app.kubernetes.io/name: node-api
        app.kubernetes.io/component: server
        app.kubernetes.io/part-of: auth-app
    spec:
      imagePullSecrets:
        - name: docker-hub-secret # Le nom du Secret créé avec 'kubectl create secret docker-registry'
      containers:
        - name: api
          image: techopsfr/app-vue-nodeapi:1bbfd25
          ports:
            - containerPort: 80
          env:
            - name: JWT_PUBLIC_KEY
              valueFrom:
                secretKeyRef:
                  name: jwt-secret      # Créé avec le script generate-jwt-secret.sh
                  key: public_key.pem   # La clé de la clé
            - name: JWT_PRIVATE_KEY
              valueFrom:
                secretKeyRef:
                  name: jwt-secret      # Créé avec le script generate-jwt-secret.sh
                  key: private_key.pem  # La clé de la clé
            - name: MONGODB_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: mongodb        # Nom du Secret (cf: kubctl get secrets) - crée à l'instal de mongodb avec Helm
                  key: mongodb-root-password # La clé (cf: kubctl describle secrets mongodb)
            - name: MONGODB_USER
              value: root
            - name: MONGODB_HOST
              #value: mongodb:27017           # Pour architecture en standalone
              value: mongodb-headless:27017   # Pour architecture en replicaset
          # resources: 
          #   requests:
          #     memory: 64Mi
          #     cpu: 250m
          #   limits:
          #     memory: 128Mi
          #     cpu: 500m
          # On configure les sondes pour être sur que le Kubelet des Pods fait des requêtes sur une URL valide et non 
          # pas sur / car ne marche pas avec l'application api-node. Il faut donc lui préciser le path pour les sondes
          livenessProbe:
            httpGet:
              path: /api/user/current # Path de test
              port: 80
            initialDelaySeconds: 15
            periodSeconds: 15
          readinessProbe:
            httpGet:
              path: /api/user/current # Path de test 
              port: 80
            initialDelaySeconds: 5         
            periodSeconds: 10